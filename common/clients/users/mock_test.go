// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package users

import (
	"context"
	"github.com/ivch/dynasty/server/handlers/users"
	"sync"
)

// Ensure, that userServiceMock does implement userService.
// If this is not the case, regenerate this file with moq.
var _ userService = &userServiceMock{}

// userServiceMock is a mock implementation of userService.
//
//	func TestSomethingThatUsesuserService(t *testing.T) {
//
//		// make and configure a mocked userService
//		mockeduserService := &userServiceMock{
//			UserByIDFunc: func(ctx context.Context, id uint) (*users.User, error) {
//				panic("mock out the UserByID method")
//			},
//			UserByPhoneAndPasswordFunc: func(ctx context.Context, phone string, password string) (*users.User, error) {
//				panic("mock out the UserByPhoneAndPassword method")
//			},
//		}
//
//		// use mockeduserService in code that requires userService
//		// and then make assertions.
//
//	}
type userServiceMock struct {
	// UserByIDFunc mocks the UserByID method.
	UserByIDFunc func(ctx context.Context, id uint) (*users.User, error)

	// UserByPhoneAndPasswordFunc mocks the UserByPhoneAndPassword method.
	UserByPhoneAndPasswordFunc func(ctx context.Context, phone string, password string) (*users.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// UserByID holds details about calls to the UserByID method.
		UserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// UserByPhoneAndPassword holds details about calls to the UserByPhoneAndPassword method.
		UserByPhoneAndPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Phone is the phone argument value.
			Phone string
			// Password is the password argument value.
			Password string
		}
	}
	lockUserByID               sync.RWMutex
	lockUserByPhoneAndPassword sync.RWMutex
}

// UserByID calls UserByIDFunc.
func (mock *userServiceMock) UserByID(ctx context.Context, id uint) (*users.User, error) {
	if mock.UserByIDFunc == nil {
		panic("userServiceMock.UserByIDFunc: method is nil but userService.UserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockUserByID.Lock()
	mock.calls.UserByID = append(mock.calls.UserByID, callInfo)
	mock.lockUserByID.Unlock()
	return mock.UserByIDFunc(ctx, id)
}

// UserByIDCalls gets all the calls that were made to UserByID.
// Check the length with:
//
//	len(mockeduserService.UserByIDCalls())
func (mock *userServiceMock) UserByIDCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockUserByID.RLock()
	calls = mock.calls.UserByID
	mock.lockUserByID.RUnlock()
	return calls
}

// UserByPhoneAndPassword calls UserByPhoneAndPasswordFunc.
func (mock *userServiceMock) UserByPhoneAndPassword(ctx context.Context, phone string, password string) (*users.User, error) {
	if mock.UserByPhoneAndPasswordFunc == nil {
		panic("userServiceMock.UserByPhoneAndPasswordFunc: method is nil but userService.UserByPhoneAndPassword was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Phone    string
		Password string
	}{
		Ctx:      ctx,
		Phone:    phone,
		Password: password,
	}
	mock.lockUserByPhoneAndPassword.Lock()
	mock.calls.UserByPhoneAndPassword = append(mock.calls.UserByPhoneAndPassword, callInfo)
	mock.lockUserByPhoneAndPassword.Unlock()
	return mock.UserByPhoneAndPasswordFunc(ctx, phone, password)
}

// UserByPhoneAndPasswordCalls gets all the calls that were made to UserByPhoneAndPassword.
// Check the length with:
//
//	len(mockeduserService.UserByPhoneAndPasswordCalls())
func (mock *userServiceMock) UserByPhoneAndPasswordCalls() []struct {
	Ctx      context.Context
	Phone    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Phone    string
		Password string
	}
	mock.lockUserByPhoneAndPassword.RLock()
	calls = mock.calls.UserByPhoneAndPassword
	mock.lockUserByPhoneAndPassword.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package requests

import (
	"context"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/ivch/dynasty/models/dto"
	"github.com/ivch/dynasty/models/entities"
	"sync"
)

var (
	lockrequestsRepositoryMockAddImage              sync.RWMutex
	lockrequestsRepositoryMockCountForGuard         sync.RWMutex
	lockrequestsRepositoryMockCreate                sync.RWMutex
	lockrequestsRepositoryMockDelete                sync.RWMutex
	lockrequestsRepositoryMockDeleteImage           sync.RWMutex
	lockrequestsRepositoryMockGetRequestByIDAndUser sync.RWMutex
	lockrequestsRepositoryMockListByUser            sync.RWMutex
	lockrequestsRepositoryMockListForGuard          sync.RWMutex
	lockrequestsRepositoryMockUpdate                sync.RWMutex
	lockrequestsRepositoryMockUpdateForGuard        sync.RWMutex
)

// Ensure, that requestsRepositoryMock does implement requestsRepository.
// If this is not the case, regenerate this file with moq.
var _ requestsRepository = &requestsRepositoryMock{}

// requestsRepositoryMock is a mock implementation of requestsRepository.
//
//     func TestSomethingThatUsesrequestsRepository(t *testing.T) {
//
//         // make and configure a mocked requestsRepository
//         mockedrequestsRepository := &requestsRepositoryMock{
//             AddImageFunc: func(userID uint, requestID uint, filename string) error {
// 	               panic("mock out the AddImage method")
//             },
//             CountForGuardFunc: func(req *dto.RequestListFilterRequest) (int, error) {
// 	               panic("mock out the CountForGuard method")
//             },
//             CreateFunc: func(req *entities.Request) (uint, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(id uint, userID uint) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteImageFunc: func(userID uint, requestID uint, filename string) error {
// 	               panic("mock out the DeleteImage method")
//             },
//             GetRequestByIDAndUserFunc: func(id uint, userId uint) (*entities.Request, error) {
// 	               panic("mock out the GetRequestByIDAndUser method")
//             },
//             ListByUserFunc: func(r *dto.RequestListFilterRequest) ([]*entities.Request, error) {
// 	               panic("mock out the ListByUser method")
//             },
//             ListForGuardFunc: func(req *dto.RequestListFilterRequest) ([]*entities.Request, error) {
// 	               panic("mock out the ListForGuard method")
//             },
//             UpdateFunc: func(req *entities.Request) error {
// 	               panic("mock out the Update method")
//             },
//             UpdateForGuardFunc: func(id uint, status string) error {
// 	               panic("mock out the UpdateForGuard method")
//             },
//         }
//
//         // use mockedrequestsRepository in code that requires requestsRepository
//         // and then make assertions.
//
//     }
type requestsRepositoryMock struct {
	// AddImageFunc mocks the AddImage method.
	AddImageFunc func(userID uint, requestID uint, filename string) error

	// CountForGuardFunc mocks the CountForGuard method.
	CountForGuardFunc func(req *dto.RequestListFilterRequest) (int, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(req *entities.Request) (uint, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uint, userID uint) error

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(userID uint, requestID uint, filename string) error

	// GetRequestByIDAndUserFunc mocks the GetRequestByIDAndUser method.
	GetRequestByIDAndUserFunc func(id uint, userId uint) (*entities.Request, error)

	// ListByUserFunc mocks the ListByUser method.
	ListByUserFunc func(r *dto.RequestListFilterRequest) ([]*entities.Request, error)

	// ListForGuardFunc mocks the ListForGuard method.
	ListForGuardFunc func(req *dto.RequestListFilterRequest) ([]*entities.Request, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(req *entities.Request) error

	// UpdateForGuardFunc mocks the UpdateForGuard method.
	UpdateForGuardFunc func(id uint, status string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddImage holds details about calls to the AddImage method.
		AddImage []struct {
			// UserID is the userID argument value.
			UserID uint
			// RequestID is the requestID argument value.
			RequestID uint
			// Filename is the filename argument value.
			Filename string
		}
		// CountForGuard holds details about calls to the CountForGuard method.
		CountForGuard []struct {
			// Req is the req argument value.
			Req *dto.RequestListFilterRequest
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Req is the req argument value.
			Req *entities.Request
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uint
			// UserID is the userID argument value.
			UserID uint
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// UserID is the userID argument value.
			UserID uint
			// RequestID is the requestID argument value.
			RequestID uint
			// Filename is the filename argument value.
			Filename string
		}
		// GetRequestByIDAndUser holds details about calls to the GetRequestByIDAndUser method.
		GetRequestByIDAndUser []struct {
			// ID is the id argument value.
			ID uint
			// UserId is the userId argument value.
			UserId uint
		}
		// ListByUser holds details about calls to the ListByUser method.
		ListByUser []struct {
			// R is the r argument value.
			R *dto.RequestListFilterRequest
		}
		// ListForGuard holds details about calls to the ListForGuard method.
		ListForGuard []struct {
			// Req is the req argument value.
			Req *dto.RequestListFilterRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Req is the req argument value.
			Req *entities.Request
		}
		// UpdateForGuard holds details about calls to the UpdateForGuard method.
		UpdateForGuard []struct {
			// ID is the id argument value.
			ID uint
			// Status is the status argument value.
			Status string
		}
	}
}

// AddImage calls AddImageFunc.
func (mock *requestsRepositoryMock) AddImage(userID uint, requestID uint, filename string) error {
	if mock.AddImageFunc == nil {
		panic("requestsRepositoryMock.AddImageFunc: method is nil but requestsRepository.AddImage was just called")
	}
	callInfo := struct {
		UserID    uint
		RequestID uint
		Filename  string
	}{
		UserID:    userID,
		RequestID: requestID,
		Filename:  filename,
	}
	lockrequestsRepositoryMockAddImage.Lock()
	mock.calls.AddImage = append(mock.calls.AddImage, callInfo)
	lockrequestsRepositoryMockAddImage.Unlock()
	return mock.AddImageFunc(userID, requestID, filename)
}

// AddImageCalls gets all the calls that were made to AddImage.
// Check the length with:
//     len(mockedrequestsRepository.AddImageCalls())
func (mock *requestsRepositoryMock) AddImageCalls() []struct {
	UserID    uint
	RequestID uint
	Filename  string
} {
	var calls []struct {
		UserID    uint
		RequestID uint
		Filename  string
	}
	lockrequestsRepositoryMockAddImage.RLock()
	calls = mock.calls.AddImage
	lockrequestsRepositoryMockAddImage.RUnlock()
	return calls
}

// CountForGuard calls CountForGuardFunc.
func (mock *requestsRepositoryMock) CountForGuard(req *dto.RequestListFilterRequest) (int, error) {
	if mock.CountForGuardFunc == nil {
		panic("requestsRepositoryMock.CountForGuardFunc: method is nil but requestsRepository.CountForGuard was just called")
	}
	callInfo := struct {
		Req *dto.RequestListFilterRequest
	}{
		Req: req,
	}
	lockrequestsRepositoryMockCountForGuard.Lock()
	mock.calls.CountForGuard = append(mock.calls.CountForGuard, callInfo)
	lockrequestsRepositoryMockCountForGuard.Unlock()
	return mock.CountForGuardFunc(req)
}

// CountForGuardCalls gets all the calls that were made to CountForGuard.
// Check the length with:
//     len(mockedrequestsRepository.CountForGuardCalls())
func (mock *requestsRepositoryMock) CountForGuardCalls() []struct {
	Req *dto.RequestListFilterRequest
} {
	var calls []struct {
		Req *dto.RequestListFilterRequest
	}
	lockrequestsRepositoryMockCountForGuard.RLock()
	calls = mock.calls.CountForGuard
	lockrequestsRepositoryMockCountForGuard.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *requestsRepositoryMock) Create(req *entities.Request) (uint, error) {
	if mock.CreateFunc == nil {
		panic("requestsRepositoryMock.CreateFunc: method is nil but requestsRepository.Create was just called")
	}
	callInfo := struct {
		Req *entities.Request
	}{
		Req: req,
	}
	lockrequestsRepositoryMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockrequestsRepositoryMockCreate.Unlock()
	return mock.CreateFunc(req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedrequestsRepository.CreateCalls())
func (mock *requestsRepositoryMock) CreateCalls() []struct {
	Req *entities.Request
} {
	var calls []struct {
		Req *entities.Request
	}
	lockrequestsRepositoryMockCreate.RLock()
	calls = mock.calls.Create
	lockrequestsRepositoryMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *requestsRepositoryMock) Delete(id uint, userID uint) error {
	if mock.DeleteFunc == nil {
		panic("requestsRepositoryMock.DeleteFunc: method is nil but requestsRepository.Delete was just called")
	}
	callInfo := struct {
		ID     uint
		UserID uint
	}{
		ID:     id,
		UserID: userID,
	}
	lockrequestsRepositoryMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockrequestsRepositoryMockDelete.Unlock()
	return mock.DeleteFunc(id, userID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedrequestsRepository.DeleteCalls())
func (mock *requestsRepositoryMock) DeleteCalls() []struct {
	ID     uint
	UserID uint
} {
	var calls []struct {
		ID     uint
		UserID uint
	}
	lockrequestsRepositoryMockDelete.RLock()
	calls = mock.calls.Delete
	lockrequestsRepositoryMockDelete.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *requestsRepositoryMock) DeleteImage(userID uint, requestID uint, filename string) error {
	if mock.DeleteImageFunc == nil {
		panic("requestsRepositoryMock.DeleteImageFunc: method is nil but requestsRepository.DeleteImage was just called")
	}
	callInfo := struct {
		UserID    uint
		RequestID uint
		Filename  string
	}{
		UserID:    userID,
		RequestID: requestID,
		Filename:  filename,
	}
	lockrequestsRepositoryMockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	lockrequestsRepositoryMockDeleteImage.Unlock()
	return mock.DeleteImageFunc(userID, requestID, filename)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//     len(mockedrequestsRepository.DeleteImageCalls())
func (mock *requestsRepositoryMock) DeleteImageCalls() []struct {
	UserID    uint
	RequestID uint
	Filename  string
} {
	var calls []struct {
		UserID    uint
		RequestID uint
		Filename  string
	}
	lockrequestsRepositoryMockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	lockrequestsRepositoryMockDeleteImage.RUnlock()
	return calls
}

// GetRequestByIDAndUser calls GetRequestByIDAndUserFunc.
func (mock *requestsRepositoryMock) GetRequestByIDAndUser(id uint, userId uint) (*entities.Request, error) {
	if mock.GetRequestByIDAndUserFunc == nil {
		panic("requestsRepositoryMock.GetRequestByIDAndUserFunc: method is nil but requestsRepository.GetRequestByIDAndUser was just called")
	}
	callInfo := struct {
		ID     uint
		UserId uint
	}{
		ID:     id,
		UserId: userId,
	}
	lockrequestsRepositoryMockGetRequestByIDAndUser.Lock()
	mock.calls.GetRequestByIDAndUser = append(mock.calls.GetRequestByIDAndUser, callInfo)
	lockrequestsRepositoryMockGetRequestByIDAndUser.Unlock()
	return mock.GetRequestByIDAndUserFunc(id, userId)
}

// GetRequestByIDAndUserCalls gets all the calls that were made to GetRequestByIDAndUser.
// Check the length with:
//     len(mockedrequestsRepository.GetRequestByIDAndUserCalls())
func (mock *requestsRepositoryMock) GetRequestByIDAndUserCalls() []struct {
	ID     uint
	UserId uint
} {
	var calls []struct {
		ID     uint
		UserId uint
	}
	lockrequestsRepositoryMockGetRequestByIDAndUser.RLock()
	calls = mock.calls.GetRequestByIDAndUser
	lockrequestsRepositoryMockGetRequestByIDAndUser.RUnlock()
	return calls
}

// ListByUser calls ListByUserFunc.
func (mock *requestsRepositoryMock) ListByUser(r *dto.RequestListFilterRequest) ([]*entities.Request, error) {
	if mock.ListByUserFunc == nil {
		panic("requestsRepositoryMock.ListByUserFunc: method is nil but requestsRepository.ListByUser was just called")
	}
	callInfo := struct {
		R *dto.RequestListFilterRequest
	}{
		R: r,
	}
	lockrequestsRepositoryMockListByUser.Lock()
	mock.calls.ListByUser = append(mock.calls.ListByUser, callInfo)
	lockrequestsRepositoryMockListByUser.Unlock()
	return mock.ListByUserFunc(r)
}

// ListByUserCalls gets all the calls that were made to ListByUser.
// Check the length with:
//     len(mockedrequestsRepository.ListByUserCalls())
func (mock *requestsRepositoryMock) ListByUserCalls() []struct {
	R *dto.RequestListFilterRequest
} {
	var calls []struct {
		R *dto.RequestListFilterRequest
	}
	lockrequestsRepositoryMockListByUser.RLock()
	calls = mock.calls.ListByUser
	lockrequestsRepositoryMockListByUser.RUnlock()
	return calls
}

// ListForGuard calls ListForGuardFunc.
func (mock *requestsRepositoryMock) ListForGuard(req *dto.RequestListFilterRequest) ([]*entities.Request, error) {
	if mock.ListForGuardFunc == nil {
		panic("requestsRepositoryMock.ListForGuardFunc: method is nil but requestsRepository.ListForGuard was just called")
	}
	callInfo := struct {
		Req *dto.RequestListFilterRequest
	}{
		Req: req,
	}
	lockrequestsRepositoryMockListForGuard.Lock()
	mock.calls.ListForGuard = append(mock.calls.ListForGuard, callInfo)
	lockrequestsRepositoryMockListForGuard.Unlock()
	return mock.ListForGuardFunc(req)
}

// ListForGuardCalls gets all the calls that were made to ListForGuard.
// Check the length with:
//     len(mockedrequestsRepository.ListForGuardCalls())
func (mock *requestsRepositoryMock) ListForGuardCalls() []struct {
	Req *dto.RequestListFilterRequest
} {
	var calls []struct {
		Req *dto.RequestListFilterRequest
	}
	lockrequestsRepositoryMockListForGuard.RLock()
	calls = mock.calls.ListForGuard
	lockrequestsRepositoryMockListForGuard.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *requestsRepositoryMock) Update(req *entities.Request) error {
	if mock.UpdateFunc == nil {
		panic("requestsRepositoryMock.UpdateFunc: method is nil but requestsRepository.Update was just called")
	}
	callInfo := struct {
		Req *entities.Request
	}{
		Req: req,
	}
	lockrequestsRepositoryMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockrequestsRepositoryMockUpdate.Unlock()
	return mock.UpdateFunc(req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedrequestsRepository.UpdateCalls())
func (mock *requestsRepositoryMock) UpdateCalls() []struct {
	Req *entities.Request
} {
	var calls []struct {
		Req *entities.Request
	}
	lockrequestsRepositoryMockUpdate.RLock()
	calls = mock.calls.Update
	lockrequestsRepositoryMockUpdate.RUnlock()
	return calls
}

// UpdateForGuard calls UpdateForGuardFunc.
func (mock *requestsRepositoryMock) UpdateForGuard(id uint, status string) error {
	if mock.UpdateForGuardFunc == nil {
		panic("requestsRepositoryMock.UpdateForGuardFunc: method is nil but requestsRepository.UpdateForGuard was just called")
	}
	callInfo := struct {
		ID     uint
		Status string
	}{
		ID:     id,
		Status: status,
	}
	lockrequestsRepositoryMockUpdateForGuard.Lock()
	mock.calls.UpdateForGuard = append(mock.calls.UpdateForGuard, callInfo)
	lockrequestsRepositoryMockUpdateForGuard.Unlock()
	return mock.UpdateForGuardFunc(id, status)
}

// UpdateForGuardCalls gets all the calls that were made to UpdateForGuard.
// Check the length with:
//     len(mockedrequestsRepository.UpdateForGuardCalls())
func (mock *requestsRepositoryMock) UpdateForGuardCalls() []struct {
	ID     uint
	Status string
} {
	var calls []struct {
		ID     uint
		Status string
	}
	lockrequestsRepositoryMockUpdateForGuard.RLock()
	calls = mock.calls.UpdateForGuard
	lockrequestsRepositoryMockUpdateForGuard.RUnlock()
	return calls
}

var (
	locks3ClientMockDeleteObject sync.RWMutex
	locks3ClientMockPutObject    sync.RWMutex
)

// Ensure, that s3ClientMock does implement s3Client.
// If this is not the case, regenerate this file with moq.
var _ s3Client = &s3ClientMock{}

// s3ClientMock is a mock implementation of s3Client.
//
//     func TestSomethingThatUsess3Client(t *testing.T) {
//
//         // make and configure a mocked s3Client
//         mockeds3Client := &s3ClientMock{
//             DeleteObjectFunc: func(input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
// 	               panic("mock out the DeleteObject method")
//             },
//             PutObjectFunc: func(input *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
// 	               panic("mock out the PutObject method")
//             },
//         }
//
//         // use mockeds3Client in code that requires s3Client
//         // and then make assertions.
//
//     }
type s3ClientMock struct {
	// DeleteObjectFunc mocks the DeleteObject method.
	DeleteObjectFunc func(input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error)

	// PutObjectFunc mocks the PutObject method.
	PutObjectFunc func(input *s3.PutObjectInput) (*s3.PutObjectOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteObject holds details about calls to the DeleteObject method.
		DeleteObject []struct {
			// Input is the input argument value.
			Input *s3.DeleteObjectInput
		}
		// PutObject holds details about calls to the PutObject method.
		PutObject []struct {
			// Input is the input argument value.
			Input *s3.PutObjectInput
		}
	}
}

// DeleteObject calls DeleteObjectFunc.
func (mock *s3ClientMock) DeleteObject(input *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	if mock.DeleteObjectFunc == nil {
		panic("s3ClientMock.DeleteObjectFunc: method is nil but s3Client.DeleteObject was just called")
	}
	callInfo := struct {
		Input *s3.DeleteObjectInput
	}{
		Input: input,
	}
	locks3ClientMockDeleteObject.Lock()
	mock.calls.DeleteObject = append(mock.calls.DeleteObject, callInfo)
	locks3ClientMockDeleteObject.Unlock()
	return mock.DeleteObjectFunc(input)
}

// DeleteObjectCalls gets all the calls that were made to DeleteObject.
// Check the length with:
//     len(mockeds3Client.DeleteObjectCalls())
func (mock *s3ClientMock) DeleteObjectCalls() []struct {
	Input *s3.DeleteObjectInput
} {
	var calls []struct {
		Input *s3.DeleteObjectInput
	}
	locks3ClientMockDeleteObject.RLock()
	calls = mock.calls.DeleteObject
	locks3ClientMockDeleteObject.RUnlock()
	return calls
}

// PutObject calls PutObjectFunc.
func (mock *s3ClientMock) PutObject(input *s3.PutObjectInput) (*s3.PutObjectOutput, error) {
	if mock.PutObjectFunc == nil {
		panic("s3ClientMock.PutObjectFunc: method is nil but s3Client.PutObject was just called")
	}
	callInfo := struct {
		Input *s3.PutObjectInput
	}{
		Input: input,
	}
	locks3ClientMockPutObject.Lock()
	mock.calls.PutObject = append(mock.calls.PutObject, callInfo)
	locks3ClientMockPutObject.Unlock()
	return mock.PutObjectFunc(input)
}

// PutObjectCalls gets all the calls that were made to PutObject.
// Check the length with:
//     len(mockeds3Client.PutObjectCalls())
func (mock *s3ClientMock) PutObjectCalls() []struct {
	Input *s3.PutObjectInput
} {
	var calls []struct {
		Input *s3.PutObjectInput
	}
	locks3ClientMockPutObject.RLock()
	calls = mock.calls.PutObject
	locks3ClientMockPutObject.RUnlock()
	return calls
}

var (
	lockServiceMockCreate             sync.RWMutex
	lockServiceMockDelete             sync.RWMutex
	lockServiceMockDeleteImage        sync.RWMutex
	lockServiceMockGet                sync.RWMutex
	lockServiceMockGuardRequestList   sync.RWMutex
	lockServiceMockGuardUpdateRequest sync.RWMutex
	lockServiceMockMy                 sync.RWMutex
	lockServiceMockUpdate             sync.RWMutex
	lockServiceMockUploadImage        sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateFunc: func(ctx context.Context, r *dto.RequestCreateRequest) (*dto.RequestCreateResponse, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, r *dto.RequestByID) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteImageFunc: func(ctx context.Context, r *dto.DeleteImageRequest) error {
// 	               panic("mock out the DeleteImage method")
//             },
//             GetFunc: func(ctx context.Context, r *dto.RequestByID) (*dto.RequestByIDResponse, error) {
// 	               panic("mock out the Get method")
//             },
//             GuardRequestListFunc: func(ctx context.Context, r *dto.RequestListFilterRequest) (*dto.RequestGuardListResponse, error) {
// 	               panic("mock out the GuardRequestList method")
//             },
//             GuardUpdateRequestFunc: func(ctx context.Context, r *dto.GuardUpdateRequest) error {
// 	               panic("mock out the GuardUpdateRequest method")
//             },
//             MyFunc: func(ctx context.Context, r *dto.RequestListFilterRequest) (*dto.RequestMyResponse, error) {
// 	               panic("mock out the My method")
//             },
//             UpdateFunc: func(ctx context.Context, r *dto.RequestUpdateRequest) error {
// 	               panic("mock out the Update method")
//             },
//             UploadImageFunc: func(ctx context.Context, r *dto.UploadImageRequest) (*dto.UploadImageResponse, error) {
// 	               panic("mock out the UploadImage method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, r *dto.RequestCreateRequest) (*dto.RequestCreateResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, r *dto.RequestByID) error

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(ctx context.Context, r *dto.DeleteImageRequest) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, r *dto.RequestByID) (*dto.RequestByIDResponse, error)

	// GuardRequestListFunc mocks the GuardRequestList method.
	GuardRequestListFunc func(ctx context.Context, r *dto.RequestListFilterRequest) (*dto.RequestGuardListResponse, error)

	// GuardUpdateRequestFunc mocks the GuardUpdateRequest method.
	GuardUpdateRequestFunc func(ctx context.Context, r *dto.GuardUpdateRequest) error

	// MyFunc mocks the My method.
	MyFunc func(ctx context.Context, r *dto.RequestListFilterRequest) (*dto.RequestMyResponse, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, r *dto.RequestUpdateRequest) error

	// UploadImageFunc mocks the UploadImage method.
	UploadImageFunc func(ctx context.Context, r *dto.UploadImageRequest) (*dto.UploadImageResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.RequestCreateRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.RequestByID
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.DeleteImageRequest
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.RequestByID
		}
		// GuardRequestList holds details about calls to the GuardRequestList method.
		GuardRequestList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.RequestListFilterRequest
		}
		// GuardUpdateRequest holds details about calls to the GuardUpdateRequest method.
		GuardUpdateRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.GuardUpdateRequest
		}
		// My holds details about calls to the My method.
		My []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.RequestListFilterRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.RequestUpdateRequest
		}
		// UploadImage holds details about calls to the UploadImage method.
		UploadImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *dto.UploadImageRequest
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(ctx context.Context, r *dto.RequestCreateRequest) (*dto.RequestCreateResponse, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.RequestCreateRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(ctx, r)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Ctx context.Context
	R   *dto.RequestCreateRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.RequestCreateRequest
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceMock) Delete(ctx context.Context, r *dto.RequestByID) error {
	if mock.DeleteFunc == nil {
		panic("ServiceMock.DeleteFunc: method is nil but Service.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.RequestByID
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceMockDelete.Unlock()
	return mock.DeleteFunc(ctx, r)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedService.DeleteCalls())
func (mock *ServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	R   *dto.RequestByID
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.RequestByID
	}
	lockServiceMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceMockDelete.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *ServiceMock) DeleteImage(ctx context.Context, r *dto.DeleteImageRequest) error {
	if mock.DeleteImageFunc == nil {
		panic("ServiceMock.DeleteImageFunc: method is nil but Service.DeleteImage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.DeleteImageRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	lockServiceMockDeleteImage.Unlock()
	return mock.DeleteImageFunc(ctx, r)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//     len(mockedService.DeleteImageCalls())
func (mock *ServiceMock) DeleteImageCalls() []struct {
	Ctx context.Context
	R   *dto.DeleteImageRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.DeleteImageRequest
	}
	lockServiceMockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	lockServiceMockDeleteImage.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(ctx context.Context, r *dto.RequestByID) (*dto.RequestByIDResponse, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.RequestByID
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(ctx, r)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	Ctx context.Context
	R   *dto.RequestByID
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.RequestByID
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}

// GuardRequestList calls GuardRequestListFunc.
func (mock *ServiceMock) GuardRequestList(ctx context.Context, r *dto.RequestListFilterRequest) (*dto.RequestGuardListResponse, error) {
	if mock.GuardRequestListFunc == nil {
		panic("ServiceMock.GuardRequestListFunc: method is nil but Service.GuardRequestList was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.RequestListFilterRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockGuardRequestList.Lock()
	mock.calls.GuardRequestList = append(mock.calls.GuardRequestList, callInfo)
	lockServiceMockGuardRequestList.Unlock()
	return mock.GuardRequestListFunc(ctx, r)
}

// GuardRequestListCalls gets all the calls that were made to GuardRequestList.
// Check the length with:
//     len(mockedService.GuardRequestListCalls())
func (mock *ServiceMock) GuardRequestListCalls() []struct {
	Ctx context.Context
	R   *dto.RequestListFilterRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.RequestListFilterRequest
	}
	lockServiceMockGuardRequestList.RLock()
	calls = mock.calls.GuardRequestList
	lockServiceMockGuardRequestList.RUnlock()
	return calls
}

// GuardUpdateRequest calls GuardUpdateRequestFunc.
func (mock *ServiceMock) GuardUpdateRequest(ctx context.Context, r *dto.GuardUpdateRequest) error {
	if mock.GuardUpdateRequestFunc == nil {
		panic("ServiceMock.GuardUpdateRequestFunc: method is nil but Service.GuardUpdateRequest was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.GuardUpdateRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockGuardUpdateRequest.Lock()
	mock.calls.GuardUpdateRequest = append(mock.calls.GuardUpdateRequest, callInfo)
	lockServiceMockGuardUpdateRequest.Unlock()
	return mock.GuardUpdateRequestFunc(ctx, r)
}

// GuardUpdateRequestCalls gets all the calls that were made to GuardUpdateRequest.
// Check the length with:
//     len(mockedService.GuardUpdateRequestCalls())
func (mock *ServiceMock) GuardUpdateRequestCalls() []struct {
	Ctx context.Context
	R   *dto.GuardUpdateRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.GuardUpdateRequest
	}
	lockServiceMockGuardUpdateRequest.RLock()
	calls = mock.calls.GuardUpdateRequest
	lockServiceMockGuardUpdateRequest.RUnlock()
	return calls
}

// My calls MyFunc.
func (mock *ServiceMock) My(ctx context.Context, r *dto.RequestListFilterRequest) (*dto.RequestMyResponse, error) {
	if mock.MyFunc == nil {
		panic("ServiceMock.MyFunc: method is nil but Service.My was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.RequestListFilterRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockMy.Lock()
	mock.calls.My = append(mock.calls.My, callInfo)
	lockServiceMockMy.Unlock()
	return mock.MyFunc(ctx, r)
}

// MyCalls gets all the calls that were made to My.
// Check the length with:
//     len(mockedService.MyCalls())
func (mock *ServiceMock) MyCalls() []struct {
	Ctx context.Context
	R   *dto.RequestListFilterRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.RequestListFilterRequest
	}
	lockServiceMockMy.RLock()
	calls = mock.calls.My
	lockServiceMockMy.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceMock) Update(ctx context.Context, r *dto.RequestUpdateRequest) error {
	if mock.UpdateFunc == nil {
		panic("ServiceMock.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.RequestUpdateRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceMockUpdate.Unlock()
	return mock.UpdateFunc(ctx, r)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ServiceMock) UpdateCalls() []struct {
	Ctx context.Context
	R   *dto.RequestUpdateRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.RequestUpdateRequest
	}
	lockServiceMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceMockUpdate.RUnlock()
	return calls
}

// UploadImage calls UploadImageFunc.
func (mock *ServiceMock) UploadImage(ctx context.Context, r *dto.UploadImageRequest) (*dto.UploadImageResponse, error) {
	if mock.UploadImageFunc == nil {
		panic("ServiceMock.UploadImageFunc: method is nil but Service.UploadImage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *dto.UploadImageRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockUploadImage.Lock()
	mock.calls.UploadImage = append(mock.calls.UploadImage, callInfo)
	lockServiceMockUploadImage.Unlock()
	return mock.UploadImageFunc(ctx, r)
}

// UploadImageCalls gets all the calls that were made to UploadImage.
// Check the length with:
//     len(mockedService.UploadImageCalls())
func (mock *ServiceMock) UploadImageCalls() []struct {
	Ctx context.Context
	R   *dto.UploadImageRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *dto.UploadImageRequest
	}
	lockServiceMockUploadImage.RLock()
	calls = mock.calls.UploadImage
	lockServiceMockUploadImage.RUnlock()
	return calls
}

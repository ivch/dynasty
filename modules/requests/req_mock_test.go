// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package requests

import (
	"context"
	"github.com/ivch/dynasty/models"
	"sync"
)

var (
	lockrequestsRepositoryMockCreate                sync.RWMutex
	lockrequestsRepositoryMockDelete                sync.RWMutex
	lockrequestsRepositoryMockGetRequestByIDAndUser sync.RWMutex
	lockrequestsRepositoryMockListByUser            sync.RWMutex
	lockrequestsRepositoryMockUpdate                sync.RWMutex
)

// Ensure, that requestsRepositoryMock does implement requestsRepository.
// If this is not the case, regenerate this file with moq.
var _ requestsRepository = &requestsRepositoryMock{}

// requestsRepositoryMock is a mock implementation of requestsRepository.
//
//     func TestSomethingThatUsesrequestsRepository(t *testing.T) {
//
//         // make and configure a mocked requestsRepository
//         mockedrequestsRepository := &requestsRepositoryMock{
//             CreateFunc: func(req *models.Request) (uint, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(id uint, userID uint) error {
// 	               panic("mock out the Delete method")
//             },
//             GetRequestByIDAndUserFunc: func(id uint, userId uint) (*models.Request, error) {
// 	               panic("mock out the GetRequestByIDAndUser method")
//             },
//             ListByUserFunc: func(userID uint, limit uint, offset uint) ([]*models.Request, error) {
// 	               panic("mock out the ListByUser method")
//             },
//             UpdateFunc: func(req *models.Request) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedrequestsRepository in code that requires requestsRepository
//         // and then make assertions.
//
//     }
type requestsRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(req *models.Request) (uint, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id uint, userID uint) error

	// GetRequestByIDAndUserFunc mocks the GetRequestByIDAndUser method.
	GetRequestByIDAndUserFunc func(id uint, userId uint) (*models.Request, error)

	// ListByUserFunc mocks the ListByUser method.
	ListByUserFunc func(userID uint, limit uint, offset uint) ([]*models.Request, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(req *models.Request) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Req is the req argument value.
			Req *models.Request
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID uint
			// UserID is the userID argument value.
			UserID uint
		}
		// GetRequestByIDAndUser holds details about calls to the GetRequestByIDAndUser method.
		GetRequestByIDAndUser []struct {
			// ID is the id argument value.
			ID uint
			// UserId is the userId argument value.
			UserId uint
		}
		// ListByUser holds details about calls to the ListByUser method.
		ListByUser []struct {
			// UserID is the userID argument value.
			UserID uint
			// Limit is the limit argument value.
			Limit uint
			// Offset is the offset argument value.
			Offset uint
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Req is the req argument value.
			Req *models.Request
		}
	}
}

// Create calls CreateFunc.
func (mock *requestsRepositoryMock) Create(req *models.Request) (uint, error) {
	if mock.CreateFunc == nil {
		panic("requestsRepositoryMock.CreateFunc: method is nil but requestsRepository.Create was just called")
	}
	callInfo := struct {
		Req *models.Request
	}{
		Req: req,
	}
	lockrequestsRepositoryMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockrequestsRepositoryMockCreate.Unlock()
	return mock.CreateFunc(req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedrequestsRepository.CreateCalls())
func (mock *requestsRepositoryMock) CreateCalls() []struct {
	Req *models.Request
} {
	var calls []struct {
		Req *models.Request
	}
	lockrequestsRepositoryMockCreate.RLock()
	calls = mock.calls.Create
	lockrequestsRepositoryMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *requestsRepositoryMock) Delete(id uint, userID uint) error {
	if mock.DeleteFunc == nil {
		panic("requestsRepositoryMock.DeleteFunc: method is nil but requestsRepository.Delete was just called")
	}
	callInfo := struct {
		ID     uint
		UserID uint
	}{
		ID:     id,
		UserID: userID,
	}
	lockrequestsRepositoryMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockrequestsRepositoryMockDelete.Unlock()
	return mock.DeleteFunc(id, userID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedrequestsRepository.DeleteCalls())
func (mock *requestsRepositoryMock) DeleteCalls() []struct {
	ID     uint
	UserID uint
} {
	var calls []struct {
		ID     uint
		UserID uint
	}
	lockrequestsRepositoryMockDelete.RLock()
	calls = mock.calls.Delete
	lockrequestsRepositoryMockDelete.RUnlock()
	return calls
}

// GetRequestByIDAndUser calls GetRequestByIDAndUserFunc.
func (mock *requestsRepositoryMock) GetRequestByIDAndUser(id uint, userId uint) (*models.Request, error) {
	if mock.GetRequestByIDAndUserFunc == nil {
		panic("requestsRepositoryMock.GetRequestByIDAndUserFunc: method is nil but requestsRepository.GetRequestByIDAndUser was just called")
	}
	callInfo := struct {
		ID     uint
		UserId uint
	}{
		ID:     id,
		UserId: userId,
	}
	lockrequestsRepositoryMockGetRequestByIDAndUser.Lock()
	mock.calls.GetRequestByIDAndUser = append(mock.calls.GetRequestByIDAndUser, callInfo)
	lockrequestsRepositoryMockGetRequestByIDAndUser.Unlock()
	return mock.GetRequestByIDAndUserFunc(id, userId)
}

// GetRequestByIDAndUserCalls gets all the calls that were made to GetRequestByIDAndUser.
// Check the length with:
//     len(mockedrequestsRepository.GetRequestByIDAndUserCalls())
func (mock *requestsRepositoryMock) GetRequestByIDAndUserCalls() []struct {
	ID     uint
	UserId uint
} {
	var calls []struct {
		ID     uint
		UserId uint
	}
	lockrequestsRepositoryMockGetRequestByIDAndUser.RLock()
	calls = mock.calls.GetRequestByIDAndUser
	lockrequestsRepositoryMockGetRequestByIDAndUser.RUnlock()
	return calls
}

// ListByUser calls ListByUserFunc.
func (mock *requestsRepositoryMock) ListByUser(userID uint, limit uint, offset uint) ([]*models.Request, error) {
	if mock.ListByUserFunc == nil {
		panic("requestsRepositoryMock.ListByUserFunc: method is nil but requestsRepository.ListByUser was just called")
	}
	callInfo := struct {
		UserID uint
		Limit  uint
		Offset uint
	}{
		UserID: userID,
		Limit:  limit,
		Offset: offset,
	}
	lockrequestsRepositoryMockListByUser.Lock()
	mock.calls.ListByUser = append(mock.calls.ListByUser, callInfo)
	lockrequestsRepositoryMockListByUser.Unlock()
	return mock.ListByUserFunc(userID, limit, offset)
}

// ListByUserCalls gets all the calls that were made to ListByUser.
// Check the length with:
//     len(mockedrequestsRepository.ListByUserCalls())
func (mock *requestsRepositoryMock) ListByUserCalls() []struct {
	UserID uint
	Limit  uint
	Offset uint
} {
	var calls []struct {
		UserID uint
		Limit  uint
		Offset uint
	}
	lockrequestsRepositoryMockListByUser.RLock()
	calls = mock.calls.ListByUser
	lockrequestsRepositoryMockListByUser.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *requestsRepositoryMock) Update(req *models.Request) error {
	if mock.UpdateFunc == nil {
		panic("requestsRepositoryMock.UpdateFunc: method is nil but requestsRepository.Update was just called")
	}
	callInfo := struct {
		Req *models.Request
	}{
		Req: req,
	}
	lockrequestsRepositoryMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockrequestsRepositoryMockUpdate.Unlock()
	return mock.UpdateFunc(req)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedrequestsRepository.UpdateCalls())
func (mock *requestsRepositoryMock) UpdateCalls() []struct {
	Req *models.Request
} {
	var calls []struct {
		Req *models.Request
	}
	lockrequestsRepositoryMockUpdate.RLock()
	calls = mock.calls.Update
	lockrequestsRepositoryMockUpdate.RUnlock()
	return calls
}

var (
	lockServiceMockCreate sync.RWMutex
	lockServiceMockDelete sync.RWMutex
	lockServiceMockGet    sync.RWMutex
	lockServiceMockMy     sync.RWMutex
	lockServiceMockUpdate sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateFunc: func(ctx context.Context, r *createRequest) (*createResponse, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, r *byIDRequest) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(ctx context.Context, r *byIDRequest) (*getResponse, error) {
// 	               panic("mock out the Get method")
//             },
//             MyFunc: func(ctx context.Context, r *myRequest) (*myResponse, error) {
// 	               panic("mock out the My method")
//             },
//             UpdateFunc: func(ctx context.Context, r *updateRequest) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, r *createRequest) (*createResponse, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, r *byIDRequest) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, r *byIDRequest) (*getResponse, error)

	// MyFunc mocks the My method.
	MyFunc func(ctx context.Context, r *myRequest) (*myResponse, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, r *updateRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *createRequest
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *byIDRequest
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *byIDRequest
		}
		// My holds details about calls to the My method.
		My []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *myRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *updateRequest
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(ctx context.Context, r *createRequest) (*createResponse, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *createRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(ctx, r)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Ctx context.Context
	R   *createRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *createRequest
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceMock) Delete(ctx context.Context, r *byIDRequest) error {
	if mock.DeleteFunc == nil {
		panic("ServiceMock.DeleteFunc: method is nil but Service.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *byIDRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockServiceMockDelete.Unlock()
	return mock.DeleteFunc(ctx, r)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedService.DeleteCalls())
func (mock *ServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	R   *byIDRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *byIDRequest
	}
	lockServiceMockDelete.RLock()
	calls = mock.calls.Delete
	lockServiceMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(ctx context.Context, r *byIDRequest) (*getResponse, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *byIDRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(ctx, r)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	Ctx context.Context
	R   *byIDRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *byIDRequest
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}

// My calls MyFunc.
func (mock *ServiceMock) My(ctx context.Context, r *myRequest) (*myResponse, error) {
	if mock.MyFunc == nil {
		panic("ServiceMock.MyFunc: method is nil but Service.My was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *myRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockMy.Lock()
	mock.calls.My = append(mock.calls.My, callInfo)
	lockServiceMockMy.Unlock()
	return mock.MyFunc(ctx, r)
}

// MyCalls gets all the calls that were made to My.
// Check the length with:
//     len(mockedService.MyCalls())
func (mock *ServiceMock) MyCalls() []struct {
	Ctx context.Context
	R   *myRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *myRequest
	}
	lockServiceMockMy.RLock()
	calls = mock.calls.My
	lockServiceMockMy.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceMock) Update(ctx context.Context, r *updateRequest) error {
	if mock.UpdateFunc == nil {
		panic("ServiceMock.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *updateRequest
	}{
		Ctx: ctx,
		R:   r,
	}
	lockServiceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceMockUpdate.Unlock()
	return mock.UpdateFunc(ctx, r)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ServiceMock) UpdateCalls() []struct {
	Ctx context.Context
	R   *updateRequest
} {
	var calls []struct {
		Ctx context.Context
		R   *updateRequest
	}
	lockServiceMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceMockUpdate.RUnlock()
	return calls
}

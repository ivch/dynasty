// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package users

import (
	"context"
	"github.com/ivch/dynasty/models/dto"
	"github.com/ivch/dynasty/models/entities"
	"sync"
)

var (
	lockuserRepositoryMockCreateUser      sync.RWMutex
	lockuserRepositoryMockDeleteUser      sync.RWMutex
	lockuserRepositoryMockGetUserByID     sync.RWMutex
	lockuserRepositoryMockGetUserByPhone  sync.RWMutex
	lockuserRepositoryMockUseRegCode      sync.RWMutex
	lockuserRepositoryMockValidateRegCode sync.RWMutex
)

// Ensure, that userRepositoryMock does implement userRepository.
// If this is not the case, regenerate this file with moq.
var _ userRepository = &userRepositoryMock{}

// userRepositoryMock is a mock implementation of userRepository.
//
//     func TestSomethingThatUsesuserRepository(t *testing.T) {
//
//         // make and configure a mocked userRepository
//         mockeduserRepository := &userRepositoryMock{
//             CreateUserFunc: func(user *entities.User) error {
// 	               panic("mock out the CreateUser method")
//             },
//             DeleteUserFunc: func(u *entities.User) error {
// 	               panic("mock out the DeleteUser method")
//             },
//             GetUserByIDFunc: func(id uint) (*entities.User, error) {
// 	               panic("mock out the GetUserByID method")
//             },
//             GetUserByPhoneFunc: func(phone string) (*entities.User, error) {
// 	               panic("mock out the GetUserByPhone method")
//             },
//             UseRegCodeFunc: func(code string) error {
// 	               panic("mock out the UseRegCode method")
//             },
//             ValidateRegCodeFunc: func(code string) error {
// 	               panic("mock out the ValidateRegCode method")
//             },
//         }
//
//         // use mockeduserRepository in code that requires userRepository
//         // and then make assertions.
//
//     }
type userRepositoryMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *entities.User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(u *entities.User) error

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(id uint) (*entities.User, error)

	// GetUserByPhoneFunc mocks the GetUserByPhone method.
	GetUserByPhoneFunc func(phone string) (*entities.User, error)

	// UseRegCodeFunc mocks the UseRegCode method.
	UseRegCodeFunc func(code string) error

	// ValidateRegCodeFunc mocks the ValidateRegCode method.
	ValidateRegCodeFunc func(code string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *entities.User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// U is the u argument value.
			U *entities.User
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetUserByPhone holds details about calls to the GetUserByPhone method.
		GetUserByPhone []struct {
			// Phone is the phone argument value.
			Phone string
		}
		// UseRegCode holds details about calls to the UseRegCode method.
		UseRegCode []struct {
			// Code is the code argument value.
			Code string
		}
		// ValidateRegCode holds details about calls to the ValidateRegCode method.
		ValidateRegCode []struct {
			// Code is the code argument value.
			Code string
		}
	}
}

// CreateUser calls CreateUserFunc.
func (mock *userRepositoryMock) CreateUser(user *entities.User) error {
	if mock.CreateUserFunc == nil {
		panic("userRepositoryMock.CreateUserFunc: method is nil but userRepository.CreateUser was just called")
	}
	callInfo := struct {
		User *entities.User
	}{
		User: user,
	}
	lockuserRepositoryMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockuserRepositoryMockCreateUser.Unlock()
	return mock.CreateUserFunc(user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockeduserRepository.CreateUserCalls())
func (mock *userRepositoryMock) CreateUserCalls() []struct {
	User *entities.User
} {
	var calls []struct {
		User *entities.User
	}
	lockuserRepositoryMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockuserRepositoryMockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *userRepositoryMock) DeleteUser(u *entities.User) error {
	if mock.DeleteUserFunc == nil {
		panic("userRepositoryMock.DeleteUserFunc: method is nil but userRepository.DeleteUser was just called")
	}
	callInfo := struct {
		U *entities.User
	}{
		U: u,
	}
	lockuserRepositoryMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockuserRepositoryMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(u)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockeduserRepository.DeleteUserCalls())
func (mock *userRepositoryMock) DeleteUserCalls() []struct {
	U *entities.User
} {
	var calls []struct {
		U *entities.User
	}
	lockuserRepositoryMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockuserRepositoryMockDeleteUser.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *userRepositoryMock) GetUserByID(id uint) (*entities.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("userRepositoryMock.GetUserByIDFunc: method is nil but userRepository.GetUserByID was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	lockuserRepositoryMockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	lockuserRepositoryMockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockeduserRepository.GetUserByIDCalls())
func (mock *userRepositoryMock) GetUserByIDCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	lockuserRepositoryMockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	lockuserRepositoryMockGetUserByID.RUnlock()
	return calls
}

// GetUserByPhone calls GetUserByPhoneFunc.
func (mock *userRepositoryMock) GetUserByPhone(phone string) (*entities.User, error) {
	if mock.GetUserByPhoneFunc == nil {
		panic("userRepositoryMock.GetUserByPhoneFunc: method is nil but userRepository.GetUserByPhone was just called")
	}
	callInfo := struct {
		Phone string
	}{
		Phone: phone,
	}
	lockuserRepositoryMockGetUserByPhone.Lock()
	mock.calls.GetUserByPhone = append(mock.calls.GetUserByPhone, callInfo)
	lockuserRepositoryMockGetUserByPhone.Unlock()
	return mock.GetUserByPhoneFunc(phone)
}

// GetUserByPhoneCalls gets all the calls that were made to GetUserByPhone.
// Check the length with:
//     len(mockeduserRepository.GetUserByPhoneCalls())
func (mock *userRepositoryMock) GetUserByPhoneCalls() []struct {
	Phone string
} {
	var calls []struct {
		Phone string
	}
	lockuserRepositoryMockGetUserByPhone.RLock()
	calls = mock.calls.GetUserByPhone
	lockuserRepositoryMockGetUserByPhone.RUnlock()
	return calls
}

// UseRegCode calls UseRegCodeFunc.
func (mock *userRepositoryMock) UseRegCode(code string) error {
	if mock.UseRegCodeFunc == nil {
		panic("userRepositoryMock.UseRegCodeFunc: method is nil but userRepository.UseRegCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockuserRepositoryMockUseRegCode.Lock()
	mock.calls.UseRegCode = append(mock.calls.UseRegCode, callInfo)
	lockuserRepositoryMockUseRegCode.Unlock()
	return mock.UseRegCodeFunc(code)
}

// UseRegCodeCalls gets all the calls that were made to UseRegCode.
// Check the length with:
//     len(mockeduserRepository.UseRegCodeCalls())
func (mock *userRepositoryMock) UseRegCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockuserRepositoryMockUseRegCode.RLock()
	calls = mock.calls.UseRegCode
	lockuserRepositoryMockUseRegCode.RUnlock()
	return calls
}

// ValidateRegCode calls ValidateRegCodeFunc.
func (mock *userRepositoryMock) ValidateRegCode(code string) error {
	if mock.ValidateRegCodeFunc == nil {
		panic("userRepositoryMock.ValidateRegCodeFunc: method is nil but userRepository.ValidateRegCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockuserRepositoryMockValidateRegCode.Lock()
	mock.calls.ValidateRegCode = append(mock.calls.ValidateRegCode, callInfo)
	lockuserRepositoryMockValidateRegCode.Unlock()
	return mock.ValidateRegCodeFunc(code)
}

// ValidateRegCodeCalls gets all the calls that were made to ValidateRegCode.
// Check the length with:
//     len(mockeduserRepository.ValidateRegCodeCalls())
func (mock *userRepositoryMock) ValidateRegCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockuserRepositoryMockValidateRegCode.RLock()
	calls = mock.calls.ValidateRegCode
	lockuserRepositoryMockValidateRegCode.RUnlock()
	return calls
}

var (
	lockServiceMockRegister               sync.RWMutex
	lockServiceMockUserByID               sync.RWMutex
	lockServiceMockUserByPhoneAndPassword sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             RegisterFunc: func(ctx context.Context, req *dto.UserRegisterRequest) (*dto.UserRegisterResponse, error) {
// 	               panic("mock out the Register method")
//             },
//             UserByIDFunc: func(ctx context.Context, id uint) (*dto.UserByIDResponse, error) {
// 	               panic("mock out the UserByID method")
//             },
//             UserByPhoneAndPasswordFunc: func(ctx context.Context, phone string, password string) (*dto.UserAuthResponse, error) {
// 	               panic("mock out the UserByPhoneAndPassword method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, req *dto.UserRegisterRequest) (*dto.UserRegisterResponse, error)

	// UserByIDFunc mocks the UserByID method.
	UserByIDFunc func(ctx context.Context, id uint) (*dto.UserByIDResponse, error)

	// UserByPhoneAndPasswordFunc mocks the UserByPhoneAndPassword method.
	UserByPhoneAndPasswordFunc func(ctx context.Context, phone string, password string) (*dto.UserAuthResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *dto.UserRegisterRequest
		}
		// UserByID holds details about calls to the UserByID method.
		UserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
		// UserByPhoneAndPassword holds details about calls to the UserByPhoneAndPassword method.
		UserByPhoneAndPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Phone is the phone argument value.
			Phone string
			// Password is the password argument value.
			Password string
		}
	}
}

// Register calls RegisterFunc.
func (mock *ServiceMock) Register(ctx context.Context, req *dto.UserRegisterRequest) (*dto.UserRegisterResponse, error) {
	if mock.RegisterFunc == nil {
		panic("ServiceMock.RegisterFunc: method is nil but Service.Register was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *dto.UserRegisterRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	lockServiceMockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	lockServiceMockRegister.Unlock()
	return mock.RegisterFunc(ctx, req)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//     len(mockedService.RegisterCalls())
func (mock *ServiceMock) RegisterCalls() []struct {
	Ctx context.Context
	Req *dto.UserRegisterRequest
} {
	var calls []struct {
		Ctx context.Context
		Req *dto.UserRegisterRequest
	}
	lockServiceMockRegister.RLock()
	calls = mock.calls.Register
	lockServiceMockRegister.RUnlock()
	return calls
}

// UserByID calls UserByIDFunc.
func (mock *ServiceMock) UserByID(ctx context.Context, id uint) (*dto.UserByIDResponse, error) {
	if mock.UserByIDFunc == nil {
		panic("ServiceMock.UserByIDFunc: method is nil but Service.UserByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	lockServiceMockUserByID.Lock()
	mock.calls.UserByID = append(mock.calls.UserByID, callInfo)
	lockServiceMockUserByID.Unlock()
	return mock.UserByIDFunc(ctx, id)
}

// UserByIDCalls gets all the calls that were made to UserByID.
// Check the length with:
//     len(mockedService.UserByIDCalls())
func (mock *ServiceMock) UserByIDCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	lockServiceMockUserByID.RLock()
	calls = mock.calls.UserByID
	lockServiceMockUserByID.RUnlock()
	return calls
}

// UserByPhoneAndPassword calls UserByPhoneAndPasswordFunc.
func (mock *ServiceMock) UserByPhoneAndPassword(ctx context.Context, phone string, password string) (*dto.UserAuthResponse, error) {
	if mock.UserByPhoneAndPasswordFunc == nil {
		panic("ServiceMock.UserByPhoneAndPasswordFunc: method is nil but Service.UserByPhoneAndPassword was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Phone    string
		Password string
	}{
		Ctx:      ctx,
		Phone:    phone,
		Password: password,
	}
	lockServiceMockUserByPhoneAndPassword.Lock()
	mock.calls.UserByPhoneAndPassword = append(mock.calls.UserByPhoneAndPassword, callInfo)
	lockServiceMockUserByPhoneAndPassword.Unlock()
	return mock.UserByPhoneAndPasswordFunc(ctx, phone, password)
}

// UserByPhoneAndPasswordCalls gets all the calls that were made to UserByPhoneAndPassword.
// Check the length with:
//     len(mockedService.UserByPhoneAndPasswordCalls())
func (mock *ServiceMock) UserByPhoneAndPasswordCalls() []struct {
	Ctx      context.Context
	Phone    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Phone    string
		Password string
	}
	lockServiceMockUserByPhoneAndPassword.RLock()
	calls = mock.calls.UserByPhoneAndPassword
	lockServiceMockUserByPhoneAndPassword.RUnlock()
	return calls
}

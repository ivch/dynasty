// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package users

import (
	"sync"
)

var (
	lockuserRepositoryMockCreateUser          sync.RWMutex
	lockuserRepositoryMockDeleteUser          sync.RWMutex
	lockuserRepositoryMockFindUserByApartment sync.RWMutex
	lockuserRepositoryMockGetFamilyMembers    sync.RWMutex
	lockuserRepositoryMockGetRegCode          sync.RWMutex
	lockuserRepositoryMockGetUserByID         sync.RWMutex
	lockuserRepositoryMockGetUserByPhone      sync.RWMutex
	lockuserRepositoryMockUpdateUser          sync.RWMutex
	lockuserRepositoryMockUseRegCode          sync.RWMutex
	lockuserRepositoryMockValidateRegCode     sync.RWMutex
)

// Ensure, that userRepositoryMock does implement userRepository.
// If this is not the case, regenerate this file with moq.
var _ userRepository = &userRepositoryMock{}

// userRepositoryMock is a mock implementation of userRepository.
//
//     func TestSomethingThatUsesuserRepository(t *testing.T) {
//
//         // make and configure a mocked userRepository
//         mockeduserRepository := &userRepositoryMock{
//             CreateUserFunc: func(user *User) error {
// 	               panic("mock out the CreateUser method")
//             },
//             DeleteUserFunc: func(u *User) error {
// 	               panic("mock out the DeleteUser method")
//             },
//             FindUserByApartmentFunc: func(building uint, apt uint) (*User, error) {
// 	               panic("mock out the FindUserByApartment method")
//             },
//             GetFamilyMembersFunc: func(ownerID uint) ([]*User, error) {
// 	               panic("mock out the GetFamilyMembers method")
//             },
//             GetRegCodeFunc: func() (string, error) {
// 	               panic("mock out the GetRegCode method")
//             },
//             GetUserByIDFunc: func(id uint) (*User, error) {
// 	               panic("mock out the GetUserByID method")
//             },
//             GetUserByPhoneFunc: func(phone string) (*User, error) {
// 	               panic("mock out the GetUserByPhone method")
//             },
//             UpdateUserFunc: func(u *UserUpdate) error {
// 	               panic("mock out the UpdateUser method")
//             },
//             UseRegCodeFunc: func(code string) error {
// 	               panic("mock out the UseRegCode method")
//             },
//             ValidateRegCodeFunc: func(code string) error {
// 	               panic("mock out the ValidateRegCode method")
//             },
//         }
//
//         // use mockeduserRepository in code that requires userRepository
//         // and then make assertions.
//
//     }
type userRepositoryMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(u *User) error

	// FindUserByApartmentFunc mocks the FindUserByApartment method.
	FindUserByApartmentFunc func(building uint, apt uint) (*User, error)

	// GetFamilyMembersFunc mocks the GetFamilyMembers method.
	GetFamilyMembersFunc func(ownerID uint) ([]*User, error)

	// GetRegCodeFunc mocks the GetRegCode method.
	GetRegCodeFunc func() (string, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(id uint) (*User, error)

	// GetUserByPhoneFunc mocks the GetUserByPhone method.
	GetUserByPhoneFunc func(phone string) (*User, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(u *UserUpdate) error

	// UseRegCodeFunc mocks the UseRegCode method.
	UseRegCodeFunc func(code string) error

	// ValidateRegCodeFunc mocks the ValidateRegCode method.
	ValidateRegCodeFunc func(code string) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// U is the u argument value.
			U *User
		}
		// FindUserByApartment holds details about calls to the FindUserByApartment method.
		FindUserByApartment []struct {
			// Building is the building argument value.
			Building uint
			// Apt is the apt argument value.
			Apt uint
		}
		// GetFamilyMembers holds details about calls to the GetFamilyMembers method.
		GetFamilyMembers []struct {
			// OwnerID is the ownerID argument value.
			OwnerID uint
		}
		// GetRegCode holds details about calls to the GetRegCode method.
		GetRegCode []struct {
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetUserByPhone holds details about calls to the GetUserByPhone method.
		GetUserByPhone []struct {
			// Phone is the phone argument value.
			Phone string
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// U is the u argument value.
			U *UserUpdate
		}
		// UseRegCode holds details about calls to the UseRegCode method.
		UseRegCode []struct {
			// Code is the code argument value.
			Code string
		}
		// ValidateRegCode holds details about calls to the ValidateRegCode method.
		ValidateRegCode []struct {
			// Code is the code argument value.
			Code string
		}
	}
}

// CreateUser calls CreateUserFunc.
func (mock *userRepositoryMock) CreateUser(user *User) error {
	if mock.CreateUserFunc == nil {
		panic("userRepositoryMock.CreateUserFunc: method is nil but userRepository.CreateUser was just called")
	}
	callInfo := struct {
		User *User
	}{
		User: user,
	}
	lockuserRepositoryMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockuserRepositoryMockCreateUser.Unlock()
	return mock.CreateUserFunc(user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockeduserRepository.CreateUserCalls())
func (mock *userRepositoryMock) CreateUserCalls() []struct {
	User *User
} {
	var calls []struct {
		User *User
	}
	lockuserRepositoryMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockuserRepositoryMockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *userRepositoryMock) DeleteUser(u *User) error {
	if mock.DeleteUserFunc == nil {
		panic("userRepositoryMock.DeleteUserFunc: method is nil but userRepository.DeleteUser was just called")
	}
	callInfo := struct {
		U *User
	}{
		U: u,
	}
	lockuserRepositoryMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockuserRepositoryMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(u)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockeduserRepository.DeleteUserCalls())
func (mock *userRepositoryMock) DeleteUserCalls() []struct {
	U *User
} {
	var calls []struct {
		U *User
	}
	lockuserRepositoryMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockuserRepositoryMockDeleteUser.RUnlock()
	return calls
}

// FindUserByApartment calls FindUserByApartmentFunc.
func (mock *userRepositoryMock) FindUserByApartment(building uint, apt uint) (*User, error) {
	if mock.FindUserByApartmentFunc == nil {
		panic("userRepositoryMock.FindUserByApartmentFunc: method is nil but userRepository.FindUserByApartment was just called")
	}
	callInfo := struct {
		Building uint
		Apt      uint
	}{
		Building: building,
		Apt:      apt,
	}
	lockuserRepositoryMockFindUserByApartment.Lock()
	mock.calls.FindUserByApartment = append(mock.calls.FindUserByApartment, callInfo)
	lockuserRepositoryMockFindUserByApartment.Unlock()
	return mock.FindUserByApartmentFunc(building, apt)
}

// FindUserByApartmentCalls gets all the calls that were made to FindUserByApartment.
// Check the length with:
//     len(mockeduserRepository.FindUserByApartmentCalls())
func (mock *userRepositoryMock) FindUserByApartmentCalls() []struct {
	Building uint
	Apt      uint
} {
	var calls []struct {
		Building uint
		Apt      uint
	}
	lockuserRepositoryMockFindUserByApartment.RLock()
	calls = mock.calls.FindUserByApartment
	lockuserRepositoryMockFindUserByApartment.RUnlock()
	return calls
}

// GetFamilyMembers calls GetFamilyMembersFunc.
func (mock *userRepositoryMock) GetFamilyMembers(ownerID uint) ([]*User, error) {
	if mock.GetFamilyMembersFunc == nil {
		panic("userRepositoryMock.GetFamilyMembersFunc: method is nil but userRepository.GetFamilyMembers was just called")
	}
	callInfo := struct {
		OwnerID uint
	}{
		OwnerID: ownerID,
	}
	lockuserRepositoryMockGetFamilyMembers.Lock()
	mock.calls.GetFamilyMembers = append(mock.calls.GetFamilyMembers, callInfo)
	lockuserRepositoryMockGetFamilyMembers.Unlock()
	return mock.GetFamilyMembersFunc(ownerID)
}

// GetFamilyMembersCalls gets all the calls that were made to GetFamilyMembers.
// Check the length with:
//     len(mockeduserRepository.GetFamilyMembersCalls())
func (mock *userRepositoryMock) GetFamilyMembersCalls() []struct {
	OwnerID uint
} {
	var calls []struct {
		OwnerID uint
	}
	lockuserRepositoryMockGetFamilyMembers.RLock()
	calls = mock.calls.GetFamilyMembers
	lockuserRepositoryMockGetFamilyMembers.RUnlock()
	return calls
}

// GetRegCode calls GetRegCodeFunc.
func (mock *userRepositoryMock) GetRegCode() (string, error) {
	if mock.GetRegCodeFunc == nil {
		panic("userRepositoryMock.GetRegCodeFunc: method is nil but userRepository.GetRegCode was just called")
	}
	callInfo := struct {
	}{}
	lockuserRepositoryMockGetRegCode.Lock()
	mock.calls.GetRegCode = append(mock.calls.GetRegCode, callInfo)
	lockuserRepositoryMockGetRegCode.Unlock()
	return mock.GetRegCodeFunc()
}

// GetRegCodeCalls gets all the calls that were made to GetRegCode.
// Check the length with:
//     len(mockeduserRepository.GetRegCodeCalls())
func (mock *userRepositoryMock) GetRegCodeCalls() []struct {
} {
	var calls []struct {
	}
	lockuserRepositoryMockGetRegCode.RLock()
	calls = mock.calls.GetRegCode
	lockuserRepositoryMockGetRegCode.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *userRepositoryMock) GetUserByID(id uint) (*User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("userRepositoryMock.GetUserByIDFunc: method is nil but userRepository.GetUserByID was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	lockuserRepositoryMockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	lockuserRepositoryMockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockeduserRepository.GetUserByIDCalls())
func (mock *userRepositoryMock) GetUserByIDCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	lockuserRepositoryMockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	lockuserRepositoryMockGetUserByID.RUnlock()
	return calls
}

// GetUserByPhone calls GetUserByPhoneFunc.
func (mock *userRepositoryMock) GetUserByPhone(phone string) (*User, error) {
	if mock.GetUserByPhoneFunc == nil {
		panic("userRepositoryMock.GetUserByPhoneFunc: method is nil but userRepository.GetUserByPhone was just called")
	}
	callInfo := struct {
		Phone string
	}{
		Phone: phone,
	}
	lockuserRepositoryMockGetUserByPhone.Lock()
	mock.calls.GetUserByPhone = append(mock.calls.GetUserByPhone, callInfo)
	lockuserRepositoryMockGetUserByPhone.Unlock()
	return mock.GetUserByPhoneFunc(phone)
}

// GetUserByPhoneCalls gets all the calls that were made to GetUserByPhone.
// Check the length with:
//     len(mockeduserRepository.GetUserByPhoneCalls())
func (mock *userRepositoryMock) GetUserByPhoneCalls() []struct {
	Phone string
} {
	var calls []struct {
		Phone string
	}
	lockuserRepositoryMockGetUserByPhone.RLock()
	calls = mock.calls.GetUserByPhone
	lockuserRepositoryMockGetUserByPhone.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *userRepositoryMock) UpdateUser(u *UserUpdate) error {
	if mock.UpdateUserFunc == nil {
		panic("userRepositoryMock.UpdateUserFunc: method is nil but userRepository.UpdateUser was just called")
	}
	callInfo := struct {
		U *UserUpdate
	}{
		U: u,
	}
	lockuserRepositoryMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockuserRepositoryMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(u)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockeduserRepository.UpdateUserCalls())
func (mock *userRepositoryMock) UpdateUserCalls() []struct {
	U *UserUpdate
} {
	var calls []struct {
		U *UserUpdate
	}
	lockuserRepositoryMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockuserRepositoryMockUpdateUser.RUnlock()
	return calls
}

// UseRegCode calls UseRegCodeFunc.
func (mock *userRepositoryMock) UseRegCode(code string) error {
	if mock.UseRegCodeFunc == nil {
		panic("userRepositoryMock.UseRegCodeFunc: method is nil but userRepository.UseRegCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockuserRepositoryMockUseRegCode.Lock()
	mock.calls.UseRegCode = append(mock.calls.UseRegCode, callInfo)
	lockuserRepositoryMockUseRegCode.Unlock()
	return mock.UseRegCodeFunc(code)
}

// UseRegCodeCalls gets all the calls that were made to UseRegCode.
// Check the length with:
//     len(mockeduserRepository.UseRegCodeCalls())
func (mock *userRepositoryMock) UseRegCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockuserRepositoryMockUseRegCode.RLock()
	calls = mock.calls.UseRegCode
	lockuserRepositoryMockUseRegCode.RUnlock()
	return calls
}

// ValidateRegCode calls ValidateRegCodeFunc.
func (mock *userRepositoryMock) ValidateRegCode(code string) error {
	if mock.ValidateRegCodeFunc == nil {
		panic("userRepositoryMock.ValidateRegCodeFunc: method is nil but userRepository.ValidateRegCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockuserRepositoryMockValidateRegCode.Lock()
	mock.calls.ValidateRegCode = append(mock.calls.ValidateRegCode, callInfo)
	lockuserRepositoryMockValidateRegCode.Unlock()
	return mock.ValidateRegCodeFunc(code)
}

// ValidateRegCodeCalls gets all the calls that were made to ValidateRegCode.
// Check the length with:
//     len(mockeduserRepository.ValidateRegCodeCalls())
func (mock *userRepositoryMock) ValidateRegCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockuserRepositoryMockValidateRegCode.RLock()
	calls = mock.calls.ValidateRegCode
	lockuserRepositoryMockValidateRegCode.RUnlock()
	return calls
}

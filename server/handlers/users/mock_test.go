// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package users

import (
	"sync"
)

var (
	lockuserRepositoryMockCountRecoveryCodesByUserIn24h sync.RWMutex
	lockuserRepositoryMockCreateRecoverCode             sync.RWMutex
	lockuserRepositoryMockCreateUser                    sync.RWMutex
	lockuserRepositoryMockDeleteUser                    sync.RWMutex
	lockuserRepositoryMockFindUserByApartment           sync.RWMutex
	lockuserRepositoryMockGetFamilyMembers              sync.RWMutex
	lockuserRepositoryMockGetRecoveryCode               sync.RWMutex
	lockuserRepositoryMockGetRegCode                    sync.RWMutex
	lockuserRepositoryMockGetUserByID                   sync.RWMutex
	lockuserRepositoryMockGetUserByPhone                sync.RWMutex
	lockuserRepositoryMockResetPassword                 sync.RWMutex
	lockuserRepositoryMockUpdateUser                    sync.RWMutex
	lockuserRepositoryMockUseRegCode                    sync.RWMutex
	lockuserRepositoryMockValidateRegCode               sync.RWMutex
)

// Ensure, that userRepositoryMock does implement userRepository.
// If this is not the case, regenerate this file with moq.
var _ userRepository = &userRepositoryMock{}

// userRepositoryMock is a mock implementation of userRepository.
//
//     func TestSomethingThatUsesuserRepository(t *testing.T) {
//
//         // make and configure a mocked userRepository
//         mockeduserRepository := &userRepositoryMock{
//             CountRecoveryCodesByUserIn24hFunc: func(userID uint) (int, error) {
// 	               panic("mock out the CountRecoveryCodesByUserIn24h method")
//             },
//             CreateRecoverCodeFunc: func(c *PasswordRecovery) error {
// 	               panic("mock out the CreateRecoverCode method")
//             },
//             CreateUserFunc: func(user *User) error {
// 	               panic("mock out the CreateUser method")
//             },
//             DeleteUserFunc: func(u *User) error {
// 	               panic("mock out the DeleteUser method")
//             },
//             FindUserByApartmentFunc: func(building uint, apt uint) (*User, error) {
// 	               panic("mock out the FindUserByApartment method")
//             },
//             GetFamilyMembersFunc: func(ownerID uint) ([]*User, error) {
// 	               panic("mock out the GetFamilyMembers method")
//             },
//             GetRecoveryCodeFunc: func(c *PasswordRecovery) (*PasswordRecovery, error) {
// 	               panic("mock out the GetRecoveryCode method")
//             },
//             GetRegCodeFunc: func() (string, error) {
// 	               panic("mock out the GetRegCode method")
//             },
//             GetUserByIDFunc: func(id uint) (*User, error) {
// 	               panic("mock out the GetUserByID method")
//             },
//             GetUserByPhoneFunc: func(phone string) (*User, error) {
// 	               panic("mock out the GetUserByPhone method")
//             },
//             ResetPasswordFunc: func(codeID uint, req *UserUpdate) error {
// 	               panic("mock out the ResetPassword method")
//             },
//             UpdateUserFunc: func(u *UserUpdate) error {
// 	               panic("mock out the UpdateUser method")
//             },
//             UseRegCodeFunc: func(code string) error {
// 	               panic("mock out the UseRegCode method")
//             },
//             ValidateRegCodeFunc: func(code string) error {
// 	               panic("mock out the ValidateRegCode method")
//             },
//         }
//
//         // use mockeduserRepository in code that requires userRepository
//         // and then make assertions.
//
//     }
type userRepositoryMock struct {
	// CountRecoveryCodesByUserIn24hFunc mocks the CountRecoveryCodesByUserIn24h method.
	CountRecoveryCodesByUserIn24hFunc func(userID uint) (int, error)

	// CreateRecoverCodeFunc mocks the CreateRecoverCode method.
	CreateRecoverCodeFunc func(c *PasswordRecovery) error

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(user *User) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(u *User) error

	// FindUserByApartmentFunc mocks the FindUserByApartment method.
	FindUserByApartmentFunc func(building uint, apt uint) (*User, error)

	// GetFamilyMembersFunc mocks the GetFamilyMembers method.
	GetFamilyMembersFunc func(ownerID uint) ([]*User, error)

	// GetRecoveryCodeFunc mocks the GetRecoveryCode method.
	GetRecoveryCodeFunc func(c *PasswordRecovery) (*PasswordRecovery, error)

	// GetRegCodeFunc mocks the GetRegCode method.
	GetRegCodeFunc func() (string, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(id uint) (*User, error)

	// GetUserByPhoneFunc mocks the GetUserByPhone method.
	GetUserByPhoneFunc func(phone string) (*User, error)

	// ResetPasswordFunc mocks the ResetPassword method.
	ResetPasswordFunc func(codeID uint, req *UserUpdate) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(u *UserUpdate) error

	// UseRegCodeFunc mocks the UseRegCode method.
	UseRegCodeFunc func(code string) error

	// ValidateRegCodeFunc mocks the ValidateRegCode method.
	ValidateRegCodeFunc func(code string) error

	// calls tracks calls to the methods.
	calls struct {
		// CountRecoveryCodesByUserIn24h holds details about calls to the CountRecoveryCodesByUserIn24h method.
		CountRecoveryCodesByUserIn24h []struct {
			// UserID is the userID argument value.
			UserID uint
		}
		// CreateRecoverCode holds details about calls to the CreateRecoverCode method.
		CreateRecoverCode []struct {
			// C is the c argument value.
			C *PasswordRecovery
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// User is the user argument value.
			User *User
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// U is the u argument value.
			U *User
		}
		// FindUserByApartment holds details about calls to the FindUserByApartment method.
		FindUserByApartment []struct {
			// Building is the building argument value.
			Building uint
			// Apt is the apt argument value.
			Apt uint
		}
		// GetFamilyMembers holds details about calls to the GetFamilyMembers method.
		GetFamilyMembers []struct {
			// OwnerID is the ownerID argument value.
			OwnerID uint
		}
		// GetRecoveryCode holds details about calls to the GetRecoveryCode method.
		GetRecoveryCode []struct {
			// C is the c argument value.
			C *PasswordRecovery
		}
		// GetRegCode holds details about calls to the GetRegCode method.
		GetRegCode []struct {
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// ID is the id argument value.
			ID uint
		}
		// GetUserByPhone holds details about calls to the GetUserByPhone method.
		GetUserByPhone []struct {
			// Phone is the phone argument value.
			Phone string
		}
		// ResetPassword holds details about calls to the ResetPassword method.
		ResetPassword []struct {
			// CodeID is the codeID argument value.
			CodeID uint
			// Req is the req argument value.
			Req *UserUpdate
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// U is the u argument value.
			U *UserUpdate
		}
		// UseRegCode holds details about calls to the UseRegCode method.
		UseRegCode []struct {
			// Code is the code argument value.
			Code string
		}
		// ValidateRegCode holds details about calls to the ValidateRegCode method.
		ValidateRegCode []struct {
			// Code is the code argument value.
			Code string
		}
	}
}

// CountRecoveryCodesByUserIn24h calls CountRecoveryCodesByUserIn24hFunc.
func (mock *userRepositoryMock) CountRecoveryCodesByUserIn24h(userID uint) (int, error) {
	if mock.CountRecoveryCodesByUserIn24hFunc == nil {
		panic("userRepositoryMock.CountRecoveryCodesByUserIn24hFunc: method is nil but userRepository.CountRecoveryCodesByUserIn24h was just called")
	}
	callInfo := struct {
		UserID uint
	}{
		UserID: userID,
	}
	lockuserRepositoryMockCountRecoveryCodesByUserIn24h.Lock()
	mock.calls.CountRecoveryCodesByUserIn24h = append(mock.calls.CountRecoveryCodesByUserIn24h, callInfo)
	lockuserRepositoryMockCountRecoveryCodesByUserIn24h.Unlock()
	return mock.CountRecoveryCodesByUserIn24hFunc(userID)
}

// CountRecoveryCodesByUserIn24hCalls gets all the calls that were made to CountRecoveryCodesByUserIn24h.
// Check the length with:
//     len(mockeduserRepository.CountRecoveryCodesByUserIn24hCalls())
func (mock *userRepositoryMock) CountRecoveryCodesByUserIn24hCalls() []struct {
	UserID uint
} {
	var calls []struct {
		UserID uint
	}
	lockuserRepositoryMockCountRecoveryCodesByUserIn24h.RLock()
	calls = mock.calls.CountRecoveryCodesByUserIn24h
	lockuserRepositoryMockCountRecoveryCodesByUserIn24h.RUnlock()
	return calls
}

// CreateRecoverCode calls CreateRecoverCodeFunc.
func (mock *userRepositoryMock) CreateRecoverCode(c *PasswordRecovery) error {
	if mock.CreateRecoverCodeFunc == nil {
		panic("userRepositoryMock.CreateRecoverCodeFunc: method is nil but userRepository.CreateRecoverCode was just called")
	}
	callInfo := struct {
		C *PasswordRecovery
	}{
		C: c,
	}
	lockuserRepositoryMockCreateRecoverCode.Lock()
	mock.calls.CreateRecoverCode = append(mock.calls.CreateRecoverCode, callInfo)
	lockuserRepositoryMockCreateRecoverCode.Unlock()
	return mock.CreateRecoverCodeFunc(c)
}

// CreateRecoverCodeCalls gets all the calls that were made to CreateRecoverCode.
// Check the length with:
//     len(mockeduserRepository.CreateRecoverCodeCalls())
func (mock *userRepositoryMock) CreateRecoverCodeCalls() []struct {
	C *PasswordRecovery
} {
	var calls []struct {
		C *PasswordRecovery
	}
	lockuserRepositoryMockCreateRecoverCode.RLock()
	calls = mock.calls.CreateRecoverCode
	lockuserRepositoryMockCreateRecoverCode.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *userRepositoryMock) CreateUser(user *User) error {
	if mock.CreateUserFunc == nil {
		panic("userRepositoryMock.CreateUserFunc: method is nil but userRepository.CreateUser was just called")
	}
	callInfo := struct {
		User *User
	}{
		User: user,
	}
	lockuserRepositoryMockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	lockuserRepositoryMockCreateUser.Unlock()
	return mock.CreateUserFunc(user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockeduserRepository.CreateUserCalls())
func (mock *userRepositoryMock) CreateUserCalls() []struct {
	User *User
} {
	var calls []struct {
		User *User
	}
	lockuserRepositoryMockCreateUser.RLock()
	calls = mock.calls.CreateUser
	lockuserRepositoryMockCreateUser.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *userRepositoryMock) DeleteUser(u *User) error {
	if mock.DeleteUserFunc == nil {
		panic("userRepositoryMock.DeleteUserFunc: method is nil but userRepository.DeleteUser was just called")
	}
	callInfo := struct {
		U *User
	}{
		U: u,
	}
	lockuserRepositoryMockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	lockuserRepositoryMockDeleteUser.Unlock()
	return mock.DeleteUserFunc(u)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockeduserRepository.DeleteUserCalls())
func (mock *userRepositoryMock) DeleteUserCalls() []struct {
	U *User
} {
	var calls []struct {
		U *User
	}
	lockuserRepositoryMockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	lockuserRepositoryMockDeleteUser.RUnlock()
	return calls
}

// FindUserByApartment calls FindUserByApartmentFunc.
func (mock *userRepositoryMock) FindUserByApartment(building uint, apt uint) (*User, error) {
	if mock.FindUserByApartmentFunc == nil {
		panic("userRepositoryMock.FindUserByApartmentFunc: method is nil but userRepository.FindUserByApartment was just called")
	}
	callInfo := struct {
		Building uint
		Apt      uint
	}{
		Building: building,
		Apt:      apt,
	}
	lockuserRepositoryMockFindUserByApartment.Lock()
	mock.calls.FindUserByApartment = append(mock.calls.FindUserByApartment, callInfo)
	lockuserRepositoryMockFindUserByApartment.Unlock()
	return mock.FindUserByApartmentFunc(building, apt)
}

// FindUserByApartmentCalls gets all the calls that were made to FindUserByApartment.
// Check the length with:
//     len(mockeduserRepository.FindUserByApartmentCalls())
func (mock *userRepositoryMock) FindUserByApartmentCalls() []struct {
	Building uint
	Apt      uint
} {
	var calls []struct {
		Building uint
		Apt      uint
	}
	lockuserRepositoryMockFindUserByApartment.RLock()
	calls = mock.calls.FindUserByApartment
	lockuserRepositoryMockFindUserByApartment.RUnlock()
	return calls
}

// GetFamilyMembers calls GetFamilyMembersFunc.
func (mock *userRepositoryMock) GetFamilyMembers(ownerID uint) ([]*User, error) {
	if mock.GetFamilyMembersFunc == nil {
		panic("userRepositoryMock.GetFamilyMembersFunc: method is nil but userRepository.GetFamilyMembers was just called")
	}
	callInfo := struct {
		OwnerID uint
	}{
		OwnerID: ownerID,
	}
	lockuserRepositoryMockGetFamilyMembers.Lock()
	mock.calls.GetFamilyMembers = append(mock.calls.GetFamilyMembers, callInfo)
	lockuserRepositoryMockGetFamilyMembers.Unlock()
	return mock.GetFamilyMembersFunc(ownerID)
}

// GetFamilyMembersCalls gets all the calls that were made to GetFamilyMembers.
// Check the length with:
//     len(mockeduserRepository.GetFamilyMembersCalls())
func (mock *userRepositoryMock) GetFamilyMembersCalls() []struct {
	OwnerID uint
} {
	var calls []struct {
		OwnerID uint
	}
	lockuserRepositoryMockGetFamilyMembers.RLock()
	calls = mock.calls.GetFamilyMembers
	lockuserRepositoryMockGetFamilyMembers.RUnlock()
	return calls
}

// GetRecoveryCode calls GetRecoveryCodeFunc.
func (mock *userRepositoryMock) GetRecoveryCode(c *PasswordRecovery) (*PasswordRecovery, error) {
	if mock.GetRecoveryCodeFunc == nil {
		panic("userRepositoryMock.GetRecoveryCodeFunc: method is nil but userRepository.GetRecoveryCode was just called")
	}
	callInfo := struct {
		C *PasswordRecovery
	}{
		C: c,
	}
	lockuserRepositoryMockGetRecoveryCode.Lock()
	mock.calls.GetRecoveryCode = append(mock.calls.GetRecoveryCode, callInfo)
	lockuserRepositoryMockGetRecoveryCode.Unlock()
	return mock.GetRecoveryCodeFunc(c)
}

// GetRecoveryCodeCalls gets all the calls that were made to GetRecoveryCode.
// Check the length with:
//     len(mockeduserRepository.GetRecoveryCodeCalls())
func (mock *userRepositoryMock) GetRecoveryCodeCalls() []struct {
	C *PasswordRecovery
} {
	var calls []struct {
		C *PasswordRecovery
	}
	lockuserRepositoryMockGetRecoveryCode.RLock()
	calls = mock.calls.GetRecoveryCode
	lockuserRepositoryMockGetRecoveryCode.RUnlock()
	return calls
}

// GetRegCode calls GetRegCodeFunc.
func (mock *userRepositoryMock) GetRegCode() (string, error) {
	if mock.GetRegCodeFunc == nil {
		panic("userRepositoryMock.GetRegCodeFunc: method is nil but userRepository.GetRegCode was just called")
	}
	callInfo := struct {
	}{}
	lockuserRepositoryMockGetRegCode.Lock()
	mock.calls.GetRegCode = append(mock.calls.GetRegCode, callInfo)
	lockuserRepositoryMockGetRegCode.Unlock()
	return mock.GetRegCodeFunc()
}

// GetRegCodeCalls gets all the calls that were made to GetRegCode.
// Check the length with:
//     len(mockeduserRepository.GetRegCodeCalls())
func (mock *userRepositoryMock) GetRegCodeCalls() []struct {
} {
	var calls []struct {
	}
	lockuserRepositoryMockGetRegCode.RLock()
	calls = mock.calls.GetRegCode
	lockuserRepositoryMockGetRegCode.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *userRepositoryMock) GetUserByID(id uint) (*User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("userRepositoryMock.GetUserByIDFunc: method is nil but userRepository.GetUserByID was just called")
	}
	callInfo := struct {
		ID uint
	}{
		ID: id,
	}
	lockuserRepositoryMockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	lockuserRepositoryMockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(id)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockeduserRepository.GetUserByIDCalls())
func (mock *userRepositoryMock) GetUserByIDCalls() []struct {
	ID uint
} {
	var calls []struct {
		ID uint
	}
	lockuserRepositoryMockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	lockuserRepositoryMockGetUserByID.RUnlock()
	return calls
}

// GetUserByPhone calls GetUserByPhoneFunc.
func (mock *userRepositoryMock) GetUserByPhone(phone string) (*User, error) {
	if mock.GetUserByPhoneFunc == nil {
		panic("userRepositoryMock.GetUserByPhoneFunc: method is nil but userRepository.GetUserByPhone was just called")
	}
	callInfo := struct {
		Phone string
	}{
		Phone: phone,
	}
	lockuserRepositoryMockGetUserByPhone.Lock()
	mock.calls.GetUserByPhone = append(mock.calls.GetUserByPhone, callInfo)
	lockuserRepositoryMockGetUserByPhone.Unlock()
	return mock.GetUserByPhoneFunc(phone)
}

// GetUserByPhoneCalls gets all the calls that were made to GetUserByPhone.
// Check the length with:
//     len(mockeduserRepository.GetUserByPhoneCalls())
func (mock *userRepositoryMock) GetUserByPhoneCalls() []struct {
	Phone string
} {
	var calls []struct {
		Phone string
	}
	lockuserRepositoryMockGetUserByPhone.RLock()
	calls = mock.calls.GetUserByPhone
	lockuserRepositoryMockGetUserByPhone.RUnlock()
	return calls
}

// ResetPassword calls ResetPasswordFunc.
func (mock *userRepositoryMock) ResetPassword(codeID uint, req *UserUpdate) error {
	if mock.ResetPasswordFunc == nil {
		panic("userRepositoryMock.ResetPasswordFunc: method is nil but userRepository.ResetPassword was just called")
	}
	callInfo := struct {
		CodeID uint
		Req    *UserUpdate
	}{
		CodeID: codeID,
		Req:    req,
	}
	lockuserRepositoryMockResetPassword.Lock()
	mock.calls.ResetPassword = append(mock.calls.ResetPassword, callInfo)
	lockuserRepositoryMockResetPassword.Unlock()
	return mock.ResetPasswordFunc(codeID, req)
}

// ResetPasswordCalls gets all the calls that were made to ResetPassword.
// Check the length with:
//     len(mockeduserRepository.ResetPasswordCalls())
func (mock *userRepositoryMock) ResetPasswordCalls() []struct {
	CodeID uint
	Req    *UserUpdate
} {
	var calls []struct {
		CodeID uint
		Req    *UserUpdate
	}
	lockuserRepositoryMockResetPassword.RLock()
	calls = mock.calls.ResetPassword
	lockuserRepositoryMockResetPassword.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *userRepositoryMock) UpdateUser(u *UserUpdate) error {
	if mock.UpdateUserFunc == nil {
		panic("userRepositoryMock.UpdateUserFunc: method is nil but userRepository.UpdateUser was just called")
	}
	callInfo := struct {
		U *UserUpdate
	}{
		U: u,
	}
	lockuserRepositoryMockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	lockuserRepositoryMockUpdateUser.Unlock()
	return mock.UpdateUserFunc(u)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockeduserRepository.UpdateUserCalls())
func (mock *userRepositoryMock) UpdateUserCalls() []struct {
	U *UserUpdate
} {
	var calls []struct {
		U *UserUpdate
	}
	lockuserRepositoryMockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	lockuserRepositoryMockUpdateUser.RUnlock()
	return calls
}

// UseRegCode calls UseRegCodeFunc.
func (mock *userRepositoryMock) UseRegCode(code string) error {
	if mock.UseRegCodeFunc == nil {
		panic("userRepositoryMock.UseRegCodeFunc: method is nil but userRepository.UseRegCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockuserRepositoryMockUseRegCode.Lock()
	mock.calls.UseRegCode = append(mock.calls.UseRegCode, callInfo)
	lockuserRepositoryMockUseRegCode.Unlock()
	return mock.UseRegCodeFunc(code)
}

// UseRegCodeCalls gets all the calls that were made to UseRegCode.
// Check the length with:
//     len(mockeduserRepository.UseRegCodeCalls())
func (mock *userRepositoryMock) UseRegCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockuserRepositoryMockUseRegCode.RLock()
	calls = mock.calls.UseRegCode
	lockuserRepositoryMockUseRegCode.RUnlock()
	return calls
}

// ValidateRegCode calls ValidateRegCodeFunc.
func (mock *userRepositoryMock) ValidateRegCode(code string) error {
	if mock.ValidateRegCodeFunc == nil {
		panic("userRepositoryMock.ValidateRegCodeFunc: method is nil but userRepository.ValidateRegCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockuserRepositoryMockValidateRegCode.Lock()
	mock.calls.ValidateRegCode = append(mock.calls.ValidateRegCode, callInfo)
	lockuserRepositoryMockValidateRegCode.Unlock()
	return mock.ValidateRegCodeFunc(code)
}

// ValidateRegCodeCalls gets all the calls that were made to ValidateRegCode.
// Check the length with:
//     len(mockeduserRepository.ValidateRegCodeCalls())
func (mock *userRepositoryMock) ValidateRegCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockuserRepositoryMockValidateRegCode.RLock()
	calls = mock.calls.ValidateRegCode
	lockuserRepositoryMockValidateRegCode.RUnlock()
	return calls
}

var (
	lockmailSenderMockSendRecoveryCodeEmail sync.RWMutex
)

// Ensure, that mailSenderMock does implement mailSender.
// If this is not the case, regenerate this file with moq.
var _ mailSender = &mailSenderMock{}

// mailSenderMock is a mock implementation of mailSender.
//
//     func TestSomethingThatUsesmailSender(t *testing.T) {
//
//         // make and configure a mocked mailSender
//         mockedmailSender := &mailSenderMock{
//             SendRecoveryCodeEmailFunc: func(to string, username string, code string) error {
// 	               panic("mock out the SendRecoveryCodeEmail method")
//             },
//         }
//
//         // use mockedmailSender in code that requires mailSender
//         // and then make assertions.
//
//     }
type mailSenderMock struct {
	// SendRecoveryCodeEmailFunc mocks the SendRecoveryCodeEmail method.
	SendRecoveryCodeEmailFunc func(to string, username string, code string) error

	// calls tracks calls to the methods.
	calls struct {
		// SendRecoveryCodeEmail holds details about calls to the SendRecoveryCodeEmail method.
		SendRecoveryCodeEmail []struct {
			// To is the to argument value.
			To string
			// Username is the username argument value.
			Username string
			// Code is the code argument value.
			Code string
		}
	}
}

// SendRecoveryCodeEmail calls SendRecoveryCodeEmailFunc.
func (mock *mailSenderMock) SendRecoveryCodeEmail(to string, username string, code string) error {
	if mock.SendRecoveryCodeEmailFunc == nil {
		panic("mailSenderMock.SendRecoveryCodeEmailFunc: method is nil but mailSender.SendRecoveryCodeEmail was just called")
	}
	callInfo := struct {
		To       string
		Username string
		Code     string
	}{
		To:       to,
		Username: username,
		Code:     code,
	}
	lockmailSenderMockSendRecoveryCodeEmail.Lock()
	mock.calls.SendRecoveryCodeEmail = append(mock.calls.SendRecoveryCodeEmail, callInfo)
	lockmailSenderMockSendRecoveryCodeEmail.Unlock()
	return mock.SendRecoveryCodeEmailFunc(to, username, code)
}

// SendRecoveryCodeEmailCalls gets all the calls that were made to SendRecoveryCodeEmail.
// Check the length with:
//     len(mockedmailSender.SendRecoveryCodeEmailCalls())
func (mock *mailSenderMock) SendRecoveryCodeEmailCalls() []struct {
	To       string
	Username string
	Code     string
} {
	var calls []struct {
		To       string
		Username string
		Code     string
	}
	lockmailSenderMockSendRecoveryCodeEmail.RLock()
	calls = mock.calls.SendRecoveryCodeEmail
	lockmailSenderMockSendRecoveryCodeEmail.RUnlock()
	return calls
}
